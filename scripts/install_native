#!/bin/bash

# <!-- IGNORE: This line is intentional DO NOT MODIFY --><pre><script>document.querySelector('body').firstChild.textContent = '#!/bin/bash'</script>

# "Get Fleek Network" is an attempt to make our software more accessible.
# By providing scripts to automate the installation process of our software,
# we believe that it can help improve the onboarding experience of our users.
#
# Quick install: `curl https://get.fleek.network | bash`
#
# This script automates the process illustrated in our "Getting started" guides
# advanced users might find it better to follow the instructions in the doc version
# If that's your preference, go ahead and check our guides https://docs.fleek.network
#
# Contributing?
# - If you'd like to run the install script against a Lightning branch, use the env var `USE_LIGHTNING_BRANCH``
#
# Found an issue? Please report it here: https://github.com/fleek-network/get.fleek.network

# Workdir
if ! cd "$(mktemp -d)"; then
  echo "üëπ Oops! We tried to create a temporary directory to host some install artifacts but failed for some reason..."

  exit 1
fi

# Date
dateRuntime=$(date '+%Y%m%d%H%M%S')

# Constants
kbPerGb=1000000

# Defaults
defaultName="lightning"
defaultCLIBuildName="$defaultName-node"
defaultAlphaTestnetBranch="testnet-alpha-1"
defaultCLIAlias="lgtn"
defaultLightningPath="$HOME/fleek-network/$defaultName"
defaultLightningLogPath="/var/log/$defaultName"
defaultTempLogFilePath="/var/tmp"
defaultLightningDiagnosticFilename="diagnostic.log"
defaultLightningOutputFilename="output.log"
defaultLightningDiagnosticLogAbsPath="$defaultLightningLogPath/$defaultLightningDiagnosticFilename"
defaultLightningOutputLogAbsPath="$defaultLightningLogPath/$defaultLightningOutputFilename"
defaultLightningSystemdServiceName="$defaultName"
defaultLightningSystemdServicePath="/etc/systemd/system/$defaultLightningSystemdServiceName.service"
defaultLightningConfigFilename="config.toml"
defaultLightningBasePath="$HOME/.$defaultName"
defaultLightningKeystorePath="$defaultLightningBasePath/keystore"
defaultLightningKeystoreNodePemFilename="node.pem"
defaultLightningKeystoreConsensusPemFilename="consensus.pem"
defaultLightningKeystoreNodePemPath="$defaultLightningKeystorePath/$defaultLightningKeystoreNodePemFilename"
defaultLightningKeystoreConsensusPemPath="$defaultLightningKeystorePath/$defaultLightningKeystoreConsensusPemFilename"
defaultLightningConfigPath="$defaultLightningBasePath/$defaultLightningConfigFilename"
defaultLightningHttpsRepository="https://github.com/fleek-network/$defaultName.git"
defaultDiscordUrl="https://discord.gg/fleek"
defaultDocsSite="https://docs.fleek.network"
defaultMinMemoryKBytesRequired=32000000
defaultMinDiskSpaceKBytesRequired=20000000
defaultPortRangeTCPStart=4200
defaultPortRangeTCPEnd=4299
defaultPortRangeUDPStart=4300
defaultPortRangeUDPEnd=4399
defaultPortRangeTCP="$defaultPortRangeTCPStart-$defaultPortRangeTCPStart"
defaultPortRangeUDP="$defaultPortRangeUDPStart-$defaultPortRangeUDPEnd"
defaultJournaldConfigFilePath="/etc/systemd/journald.conf"
defaultLogRotateBinFilename="logrotate"
defaultLogRotateConfigFile="/etc/logrotate.conf"
defaultLogRotatePath="/etc/logrotate.d"
defaultLogRotateLightningConf="/etc/logrotate.d/$defaultName"
defaultLogRotateLightningLogsPath="/var/log/lightning/*.log"

# App state
vCPUs=$(nproc --all)
selectedLightningPath="$defaultLightningPath"
vCPUsMinusOne=$(($vCPUs - 1))

# Error codes
err_non_root=87

# Utils
checkSystemHasRecommendedResources() {
  mem=$(awk '/^MemTotal:/{print $2}' /proc/meminfo);
  partDiskSpace=$(df --output=avail -B 1 "$PWD" |tail -n 1)

  if [[ ("$mem" -lt "$defaultMinMemoryKBytesRequired") ]] || [[ ( "$partDiskSpace" -lt "$defaultMinDiskSpaceKBytesRequired" ) ]]; then
    echo "üò¨ Oh no! You need to have at least $((defaultMinMemoryKBytesRequired / kbPerGb))GB of RAM and $((defaultMinDiskSpaceKBytesRequired / kbPerGb))GB of available disk space."
    echo
    printf -v prompt "\n\nü§ñ Are you sure you want to continue (yes/no)?"
    read -r -p "$prompt"$'\n> ' answer

    if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
      printf "ü¶ñ Exited the installation process\n\n"

      exit 1
    fi

    echo "üòÖ Alright, let's try that, but your system is below our recommendations, so don't expect it to work correctly..."

    sleep 5

    return 0
  fi
  
  echo "üëç Great! Your system has enough resources (disk space and memory)"
}

identifyOS() {
  unameOut="$(uname -s)"

  case "${unameOut}" in
      Linux*)     os=Linux;;
      Darwin*)    os=Mac;;
      CYGWIN*)    os=Cygwin;;
      MINGW*)     os=MinGw;;
      *)          os="UNKNOWN:${unameOut}"
  esac

  echo "$os" | tr '[:upper:]' '[:lower:]'
}

identifyDistro() {
  if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    echo "$ID"

    exit 0
  fi
  
  uname
}

isOSSupported() {
  os=$(identifyOS)

  if [[ "$os" == "linux" ]]; then
    distro=$(identifyDistro)

    if [[ "$distro" == "ubuntu" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "2204" ]]; then
        echo
        echo "üëπ Oops! You'll need Ubuntu 22.04 at least"
        echo

        exit 1
      fi
    elif [[ "$distro" == "debian" ]]; then
      currVersion=$(lsb_release -r -s | tr -d '.')

      if [[ "$currVersion" -lt "11" ]]; then
        echo
        echo "üëπ Oops! You'll need Debian 11 at least"
        echo

        exit 1
      fi
    else
      printf "üëπ Oops! Your operating system (%) distro (%s) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os" "$distro"

      exit 1    
    fi

    echo "‚úÖ Operating system ($os), distro ($distro) is supported!"
  else
    printf "üëπ Oops! Your operating system (%) is not supported by the installer at this time. Check our guides to learn how to install on your own https://docs.fleek.network\n" "$os"

    exit 1
  fi
}

hasCommand() {
  command -v "$1" >/dev/null 2>&1
}

hasFreePortRange() {
  hasUsedPort=0
  portStart=$1
  portEnd=$2

  for (( port=portStart; port <= portEnd; port++ )); do
    if lsof -i :"$port" >/dev/null; then
      echo "üí© Uh-oh! The port $port is required but is in use" >&2

      hasUsedPort=1
    fi
  done

  echo "$hasUsedPort"
}

setupJournald() {
  echo
  while read -rp "ü§ñ The Fleek Network Node streams a lot of text data that is stored in the log files. It can fill up the disk space quite quickly. The installer can set the journald configuration to limit the maximum usage and file size for system-wide logs, but this will effectively override any settings you might currently have. Would you like the installer to make the changes for you? (yes/no) " answer; do
    if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
      break
    elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
  # The padding for [Journal] is intentional
  cat <<EOF | sudo tee "$defaultJournaldConfigFilePath" > /dev/null
[Journal]
Storage=persistent
SystemMaxUse=1G
SystemMaxFileSize=100M
RuntimeMaxUse=100M
EOF

      if ! systemctl restart systemd-journald.service; then
        echo "‚ö†Ô∏è WARNING: Updated Journald, but failed to restart systemd"
      fi

      break;
    fi

    printf "üí© Uh-oh! We expect a yes or no answer. Try again...\n"
  done
}

setupLogrotate() {
  if ! hasCommand "$defaultLogRotateBinFilename"; then
    printf "ü§ñ Install logrotate for log management\n"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install "$defaultLogRotateBinFilename" -yq
  fi

  if [[ -f "$defaultLogRotateConfigFile" ]]; then
    if [[ ! -d "$defaultLogRotatePath" ]]; then
      sudo mkdir -p "$defaultLogRotatePath"
    else
      echo "‚úÖ The $defaultLogRotatePath exists!"
      echo
    fi

    if [[ ! -f "$defaultLogRotateLightningConf" ]]; then
      sudo touch "$defaultLogRotateLightningConf"

      # warning: the identation for `/var/log/lightning/*.log` is intentional, do not change
      cat <<EOF | sudo tee "$defaultLogRotateLightningConf" > /dev/null
$defaultLogRotateLightningLogsPath {
    rotate 5
    daily
    size 50M
    notifempty
    compress
}
EOF
    else
      if ! grep -q "$defaultLogRotateLightningLogsPath" "$defaultLogRotateLightningConf"; then
        echo "‚ö†Ô∏è WARNING: The $defaultLogRotateLightningConf exists but doesn't seem valid. You should check it manually!"
      else
        echo "‚úÖ The $defaultLogRotateLightningConf exists!"
        echo
      fi
    fi
  fi
}

# The white space before and after is intentional
cat << "ART"

  ‚≠êÔ∏è Fleek Network Lightning CLI installer ‚≠êÔ∏è

              zeeeeee-
              z$$$$$$"
            d$$$$$$"
            d$$$$$P
          d$$$$$P
          $$$$$$"
        .$$$$$$"
      .$$$$$$"
      4$$$$$$$$$$$$$"
    z$$$$$$$$$$$$$"
    """""""3$$$$$"
          z$$$$P
          d$$$$"
        .$$$$$"
      z$$$$$"
      z$$$$P
    d$$$$$$$$$$"
    *******$$$"
        .$$$"
        .$$"
      4$P"
      z$"
    zP
    z"
  /

ART

echo
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üåç Website https://fleek.network"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üìö Documentation https://docs.fleek.network"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üíæ Git repository https://github.com/fleek-network/lightning"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ ü§ñ Discord https://discord.gg/fleek"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üê§ Twitter https://twitter.com/fleek_net"
echo "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ üé® Ascii art by https://www.asciiart.eu"
echo

printf "ü§ñ Check if operating system is supported\n"
isOSSupported

(
  exec < /dev/tty;

  # üöë Check if running in Bash and supported version
  [ "$BASH" ] || { printf >&2 'üôè Run the script with Bash, please!\n'; exit 1; }
  (( BASH_VERSINFO[0] > 4 || BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] >= 2 )) || { printf >&2 'üôè Bash 4.2 or newer is required!\n'; exit 1; }

  # üöë Check total Processing Units
  defaultMinCPUUnitsCount=2
  vCPUs=$(nproc --all)
  if [[ "$vCPUs" -lt "$defaultMinCPUUnitsCount" ]]; then
    while read -rp "üòÖ The installer needs at least $defaultMinCPUUnitsCount total processing units, your system has $vCPUs. The installer is likely to fail, would you like to continue? (yes/no)" answer; do
      if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
        printf "ü¶ñ Exited the installation process\n\n"

        exit 1
      elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
        printf "üòÖ Good luck!\n\n"

        break;
      fi

      printf "üí© Uh-oh! We expect a yes or no answer. Try again...\n"
    done
  fi

  echo

  # Check if system has recommended resources (disk space and memory)
  checkSystemHasRecommendedResources "$os"

  # Warning for root users
  if [[ "$EUID" -eq 0 ]]; then
    echo "‚ö†Ô∏è WARNING: You're running the installer as ROOT user which is not recommended due to risks it poses to the system security. Create a sudo account, which allows you to execute commands with root privileges without logging in as root. Check our documentation to learn how to create a new user https://docs.fleek.network/docs/node/Install and try again later, please!"

    exit 1
  fi

  #¬†üöë Check if ports available
  if ! hasCommand lsof; then
    printf "ü§ñ Install lsof for installer port verification\n"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install lsof -yq
  fi

  hasTCPPortsAvailable=$(hasFreePortRange "$defaultPortRangeTCPStart" "$defaultPortRangeTCPEnd")
  hasUDPPortsAvailable=$(hasFreePortRange "$defaultPortRangeUDPStart" "$defaultPortRangeUDPEnd")

  if [[ "$hasTCPPortsAvailable" -eq 1 || "$hasUDPPortsAvailable" -eq 1 ]]; then
    echo "üëπ Oops! Required port(s) are in use, make sure the ports are freed before retrying, please! To learn more about required ports https://docs.fleek.network/docs/node/requirements"

    exit 1
  fi

  # Check if user is sudoer, as the command uses `sudo` warn the user
  if ! groups | grep -q 'root\|sudo'; then
    printf "‚õîÔ∏è Attention! You need to have admin privileges (sudo), switch user and try again please! üôè\n" >&2;

    exit "$err_non_root";
  fi

  # Install location
  printf "ü§ñ The $defaultName source-code is going to be stored in the recommended path %s (otherwise, type \"n\" to modify path)\n" "$defaultLightningPath"
  printf -v prompt "Should we proceed and install to path %s? (yes/no)" "$defaultLightningPath"

  while read -r -p "$prompt"$'\n> ' answer; do
    if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
      printf -v prompt "\nüôã‚Äç‚ôÄÔ∏è What path should we clone the %s source-code to?\n" "$defaultName"
      read -r -p "$prompt"$'\n> ' answer

      if [[ -d "$answer" ]]; then
        printf "üëπ Oops! The path %s already exists! This might be annoying but we don't want to mess with your system. So, clear the path and try again...\n" "$answer"

        exit 1
      fi

      if ! mkdir -p "$selectedLightningPath"; then
        printf "üëπ Oops! Failed to create the path %s\n" "$selectedLightningPath"

        exit 1
      fi

      selectedLightningPath="$answer"

      break
    fi

    if [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
      selectedLightningPath="$defaultLightningPath"
      
      break
    fi
  done

  echo

  # Dependencies verification process
  if ! hasCommand git; then
    printf "ü§ñ Install Git\n"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install git -yq
  fi

  echo

  printf "ü§ñ Clone the %s source-code (git repository) to %s\n" "$defaultName" "$selectedLightningPath"
  if [[ -n ${USE_LIGHTNING_BRANCH+x} ]]; then
    echo "ü•∑ Switch to branch $USE_LIGHTNING_BRANCH"
    if ! git clone -b "$USE_LIGHTNING_BRANCH" "$defaultLightningHttpsRepository" "$selectedLightningPath"; then
      echo "üëπ Oops! Failed to clone the $defaultName repository"

      exit 1
    fi
  else
    if ! git clone -b "$defaultAlphaTestnetBranch" "$defaultLightningHttpsRepository" "$selectedLightningPath"; then
      echo "üëπ Oops! Failed to clone the $defaultName repository"

      exit 1
    fi
  fi

  echo

  printf "ü§ñ Change directory to %s (git repository)\n" "$selectedLightningPath"
  if ! cd "$selectedLightningPath"; then
    printf "üëπ Oops! Failed to change directory to %s\n" "$selectedLightningPath"

    exit 1
  fi

  # Check if rust toolchain is available
  if ! command -vp "cargo" &> /dev/null && ! command -vp "rustc" &> /dev/null; then
    printf "ü§ñ Install the Rustup tool\n"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    echo

    # TODO: `cargo not found` under sudoer for some reason
    # although the `cargo --version` below works but not the follow up cargo build
    printf "ü§ñ Reload PATH environments to include Cargo\n"
    source "$HOME/.cargo/env"
    
    echo

    printf "‚úÖ Rust is installed!\n"

    printf "Cargo version is %s\n" "$(cargo --version)"
  else
    printf "ü§ñ Update Rustup\n"
    rustup update
  fi

  echo

  printf "ü§ñ Install the build-essentials, libraries and packages, necessary for compiling general software and for our use-case %s CLI\n" "$defaultName"
  sudo DEBIAN_FRONTEND=noninteractive apt-get install build-essential cmake clang pkg-config libssl-dev protobuf-compiler gcc-multilib -yq

  if [[ "$(identifyDistro)" == "debian" ]]; then
    sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq
    sudo apt-get DEBIAN_FRONTEND=noninteractive install gcc libprotobuf-dev protobuf-compiler
  fi
  
  echo

  printf "ü§ñ Build and install the %s CLI\n" "$defaultName"

  targetName="release"
  # if ! cargo +stable build --release; then
  if ! cargo +stable install --locked --path core/cli; then
    printf "üëπ Oops! Failed to build and install the %s CLI. If you are experiencing issues, help us improve by letting us know in our Discord %s\n" "$defaultName" "$defaultDiscordUrl"

    exit 1
  fi

  echo

  printf "ü§ñ Symlink the %s CLI binary to /usr/local/bin. By default rustup should've set the .cargo/bin into your system PATH, in any case we'll attempt to symlink to ensure %s is available globally\n" "$defaultName" "$defaultDiscordUrl"
  # Remove previous symlink if one exists
  if [[ -L "/usr/local/bin/$defaultCLIAlias" ]]; then
    # TODO: Symlink not getting removed for some reason
    if ! sudo rm -f "/usr/local/bin/$defaultCLIAlias"; then
      printf "üëπ Oops! Failed to remove simbolic link %s \n" "/usr/local/bin/$defaultCLIAlias"
    fi
  fi

  # TODO: As we're using non `+stable` and not `install`, this location should
  # be replaced by the /target version
  if [[ -f "$HOME/.cargo/bin/$defaultName" ]]; then
    if ! sudo ln -s "$HOME/.cargo/bin/$defaultName" /usr/local/bin/$defaultCLIAlias; then
      printf "üëπ Oops! Failed to symlink %s to /usr/local/bin/%s\n" "$HOME/.cargo/bin/$defaultName" "$defaultName"
      echo
      read -rp "üòÖ After the installation, if $defaultName CLI command is not available globally, then you need to add $HOME/.cargo/bin/lightning to your system PATH or symlink the binary to /usr/local/bin/$defaultName, as we've failed to do it. Press ENTER to continue..."
    fi
  else
    if ! sudo ln -s "$selectedLightningPath/target/$targetName/$defaultCLIBuildName" /usr/local/bin/$defaultCLIAlias; then
      printf "üëπ Oops! Failed to symlink %s to /usr/local/bin/$defaultCLIAlias\n" "$selectedLightningPath/target/$targetName/$defaultCLIBuildName"
      echo
      read -rp "üòÖ After the installation, if $defaultName $defaultCLIBuildName CLI command is unavailable globally, then you need to add $selectedLightningPath/$targetName/release/$defaultCLIBuildName to your system PATH or symlink the binary to /usr/local/bin/$defaultCLIAlias, as we've failed to do it. Press ENTER to continue..."
    fi
  fi

  echo

  printf "ü§ñ Create the ~/.lightning directory\n"
  if ! mkdir "$defaultLightningBasePath"; then
    printf "üëπ Oops! Failed to create the ~/.lightning directory\n"
  fi

  echo

  if [[ ! -d "$defaultLightningKeystorePath" ]] || [[ ! -f "$defaultLightningKeystoreNodePemPath" ]] && [[ ! -f "$defaultLightningKeystoreConsensusPemPath" ]]; then
    printf "üîë Generate keys"
    if ! lgtn keys generate; then
      echo "üëπ Oops! Failed to generate keys"
    fi
  fi

  echo

  printf "üîë The public keys are\n"
  if ! lgtn keys show | grep 'Node Public\|Consensus Public'; then
    printf "üëπ Oops! Failed to show the public keys for Node and Consensus for some reason\n"
  fi

  echo

  printf "Find the private keys in the location %s\n\n" "$HOME/.$defaultName/keystore"
  printf "‚ö†Ô∏è The public key is open to anybody to see and it represents a unique node in the Fleek Network, a bit like a bank account number. On the other hand, the private key is secret and the operator is responsible to store it privately.\n\n"
  printf "‚ö†Ô∏è Fleek Network has no way to help access, retrieve or recover lost keys. The keys are the node operator responsability! Learn more about the keystore by checking the documentation site at %s\n\n" "$defaultDocsSite"

  echo "ü§ñ Update the config.toml with user home path..."
  if ! sed -i "s|~/.$defaultName|/home/$(whoami)/.$defaultName|g" "$defaultLightningConfigPath"; then
    printf "üëπ Oops! Failed to replace the user home paths in the configuration file %s. Check the documentation to do it manually %s\n" "$defaultLightningConfigPath" "https://docs.fleek.network/references/Lightning%20CLI/update-cli-from-source-code"
  else
    printf "‚úÖ Replaced the user home paths in the configuration file\n"
  fi

  printf "üëå Great! You have successfully installed required packages, libraries, have compiled and installed %s\n" "$defaultName"
  printf "The %s CLI should be available globally, there's a symlink to the /usr/local/bin/%s. Which means that from now on you can start a Network Node by typing %s\n" "$defaultName" "$defaultCLIAlias" "$defaultCLIAlias"

  if hasCommand ufw && sudo ufw status | grep -q 'Status: active'; then
    printf "üí° Detected that ufw is active\n"

    printf -v prompt "üöì Warning! Make sure you don't have the ports %s blocked by a firewall. The installer will fail if you don't have the required ports open! Press ENTER to continue..." "${requiredPorts[*]}"
    read -rp "$prompt"
  fi

  echo

  printf "ü§ñ Create a Systemd %s service\n" "$defaultName"
  printf "ü§ñ Create the %s log directory %s\n" "$defaultName" "$defaultLightningLogPath"
  if ! sudo mkdir -p "$defaultLightningLogPath"; then
    printf "üí© Uh-oh! Failed to create the %s system log dir %s for some reason...\n" "$defaultName" "$defaultLightningLogPath"
  else
    if ! sudo chown "$(whoami):$(whoami)" "$defaultLightningLogPath"; then
      printf "üí© Uh-oh! Failed to chown %s\n" "$defaultLightningLogPath"
    fi
  fi

  echo

  echo "üìí Clear logs"
  for file in "$defaultLightningDiagnosticLogAbsPath" "$defaultLightningOutputLogAbsPath"; do
    if [[ -f "$file" ]] && ! sudo rm "$file"; then
      echo "üëπ Oops! Failed to remove $file"
    fi
  done

  echo

  printf "ü§ñ Declare the service and store in the system path\n"

# Important: the LIGHTNING_SERVICE it does not have identation on purpose, do not change
echo "
[Unit]
Description=Fleek Network Node lightning service

[Service]
Type=simple
MemoryHigh=32G
RestartSec=15s
Restart=always
ExecStart=$defaultCLIAlias -c $defaultLightningConfigPath -vv run
ExecStop=killall -9 $defaultCLIAlias
StandardOutput=append:$defaultLightningOutputLogAbsPath
StandardError=append:$defaultLightningDiagnosticLogAbsPath
Environment=TMPDIR=$defaultTempLogFilePath

[Install]
WantedBy=multi-user.target
" | sudo tee "$defaultLightningSystemdServicePath" > /dev/null

  printf "ü§ñ Set service file permissions\n"
  sudo chmod 644 "$defaultLightningSystemdServicePath"

  printf "ü§ñ System control daemon reload\n"
  sudo systemctl daemon-reload

  printf "ü§ñ Enable %s service on startup when the system boots\n" "$defaultName"
  sudo systemctl enable "$defaultLightningSystemdServiceName"

  # TODO: Disabled during early testnet
  # echo
  # while read -rp "ü§ñ The installer can launch the service for you. Would you like to start the service? (yes/no)" answer; do
  #   if [[ "$answer" == [nN] || "$answer" == [nN][oO] ]]; then
  #     break;
  #   elif [[ "$answer" == [yY] || "$answer" == [yY][eE][sS] ]]; then
  #     printf "ü§ñ Start the %s service\n" "$defaultName"
  #     sudo systemctl start "$defaultLightningSystemdServiceName"

  #     printf "ü§ñ %s service availability check\n" "$defaultName"
  #     pingAttempts=0

  #     printf "ü¶ñ Please be patient as the Fleek Network Node is launching and may take awhile üôè\n\n"

  #     while ! curl -s -X POST -H "Content-Type: application/json" -d '{ "jsonrpc": "2.0", "method": "flk_ping", "params": [], "id": 1 }' localhost:4230/rpc/v0 | grep -q "\"result\"\:\"pong\""; do
  #       if [[ "$pingAttempts" -gt 10 ]]; then
  #         printf "üëπ Oh no! Failed to health-check the localhost on port 4230\n"

  #         break;
  #       fi

  #       printf "ü§ñ Awaiting %s on port 4230...\n" "$defaultName"
  #       sleep 10

  #       ((pingAttempts++))
  #     done

  #     break;
  #   fi

  #   printf "üí© Uh-oh! We expect a yes or no answer. Try again...\n"
  # done

  setupJournald
  setupLogrotate

  #¬†TODO: Switch to /health
  if curl -s -X POST -H "Content-Type: application/json" -d '{ "jsonrpc": "2.0", "method": "flk_ping", "params": [], "id": 1 }' localhost:4230/rpc/v0 | grep -q "\"result\"\:\"pong\""; then
    echo "üåà The Fleek Network Node is running!"
  else
    echo "üåà The Fleek Network Node lightning CLI was installed and a Systemd Service was setup, to learn how to launch the service read below!"
  fi

  echo
  echo "‚ö†Ô∏è WARNING: You are required to stake to participate on Testnet. Only staked nodes will be able to participate."
  read -rp "To learn how to stake for Testnet, read the instructions provided in https://docs.fleek.network/docs/node/testnet-onboarding to run successfully. Once happy with the information provided, press ENTER to continue..."
  echo

  echo "ü§ñ Launch or stop the Network Node by running:"
  echo "sudo systemctl start $defaultName"
  echo "sudo systemctl stop $defaultName"
  echo "sudo systemctl restart $defaultName"
  echo
  echo "üéõÔ∏è Check the status of the service:"
  echo "sudo systemctl status $defaultName"
  echo
  echo "üëÄ You can watch the Node output by running the command:"
  echo "tail -f $defaultLightningOutputLogAbsPath"
  echo
  echo "ü•º For diagnostics run the command:"
  echo "tail -f $defaultLightningDiagnosticLogAbsPath"
  echo
  echo "Learn more by checking our guides at https://docs.fleek.network"
  echo "‚ú® That's all!"
  echo
)
